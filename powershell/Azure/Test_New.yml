## This YAML Pipeline is used for DB refresh and NEW DB activity for DC Env
trigger: none
variables:
- group: Conversion_OECM_Automation
- group: OECM_Automation_AzureStorage
- group: Environment_Codes
- group: Wiki_URLs
- name: varlocalpath
  value: 'OECM Refresh Database/Powershell_scripts/Conversion_Scripts'
resources:
  repositories:
  - repository: 'Wiki_Repository'
    type: git
    name: Ontario Student Information System Program Level Planning\Ontario-Student-Information-System.wiki
stages:
- stage: DataBaseRefresh_QA
  jobs:
  - deployment: DataBaseRefresh_QA
    #condition: and(succeeded(),eq(variables['REQUEST_TYPE'], 'Test'))
    timeoutInMinutes: 300
    pool:
      name: 'gwnp-win2024'
    environment:
      name: QA
    strategy:
     runOnce:
      deploy:
          steps:
          - checkout: self
            clean: true
          - checkout: Wiki_Repository
            clean: true
          - task: PowerShell@2
            displayName: 'Refresh Requests to be Looped'
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/Refresh_Requests_loop.ps1'
              arguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(DB_Refresh_Query_ID)"'
            name: mtrx
          - task: PowerShell@2
            displayName: 'Configuration Variables'
            enabled: true
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/VariableConfig.ps1'
              arguments: '"$(System.AccessToken)"'
          - task: PowerShell@2
            displayName: 'Fetch values Work Items  query and update into group variables '
            enabled: true
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/Fetch_Workitem.ps1'
              arguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(DB_Refresh_Query_ID)" "$(id)"'
          
          - task: PowerShell@2
            displayName: 'Update RG, DB Server names in Group variables'
            enabled: true
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/Update_RG_DB.ps1'
              arguments: '"$(Organization)" "$(Project)" "$(Group_Id)"  "$(System.AccessToken)"'
          - task: AzurePowerShell@5
            displayName: 'Validate the New DB/Tenant existance'
            condition: and(succeeded(),eq(variables['REQUEST_TYPE'], 'New DB'))
            continueOnError: false
            enabled: true
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/NewDB_Tenant_Validation.ps1'
              ScriptArguments: '"$(System.AccessToken)" "$(Group_Id)"'
              azurePowerShellVersion: 'LatestVersion'
          - task: AzurePowerShell@5
            displayName: 'Compare the Target and Source Database versions'
            condition: and(succeeded(),eq(variables['RefreshType'], 'Refresh'))
            enabled: true
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/DB_Version_Check.ps1'
              ScriptArguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(QA_DatabasePassword)"'
              azurePowerShellVersion: 'LatestVersion'
            env:
               QA_DATABASE_PASSWORD: $(QA_DatabasePassword)
          - task: AzurePowerShell@5
            displayName: 'Capture roles and permissions from Target DB'
            condition: and(succeeded(),eq(variables['RefreshType'], 'Refresh'), ne(variables['REQUEST_TARGET_ENV'], 'QA'))
            enabled: true
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/OECM Refresh Database/Powershell_scripts/Common_Scripts/Capture_Roles_Permissions.ps1'
              ScriptArguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(id)"'
              azurePowerShellVersion: 'LatestVersion'
          - task: AzurePowerShell@5
            displayName: 'Stored Procedure cleanup before DB Refresh'
            enabled: true
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/DB_Stored_Procedure_Cleanup_Before_DB_Refresh.ps1'
              ScriptArguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)"'
              azurePowerShellVersion: 'LatestVersion'
          - task: AzurePowerShell@5
            displayName: 'Exporting bacpac file'
            enabled: true
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/DB_Export_Bacpac.ps1'
              ScriptArguments: '"$(System.AccessToken)"'
              azurePowerShellVersion: 'LatestVersion'
            env:
               QA_DATABASE_PASSWORD: $(QA_DatabasePassword)
          - task: AzurePowerShell@5
            displayName: 'Importing bacpac file in QA Environment'
            condition: and(succeeded(),eq(variables['REQUEST_TARGET_ENV'], 'QA'))
            continueOnError: false
            enabled: true
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/$(varlocalpath)/DB_Import_Bacpac.ps1'
              #ScriptArguments: '"$(System.AccessToken)"'
              azurePowerShellVersion: 'LatestVersion'   
            env:
               QA_DATABASE_PASSWORD: $(QA_DatabasePassword)
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Importing bacpac file in Non-Conversion Environment'
            condition: and(succeeded(),ne(variables['REQUEST_TARGET_ENV'], 'QA'))
            continueOnError: false
            enabled: true
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              AuthenticationType: 'usernameAndPassword'
              username: $(QA_DatabaseUserName)
              password: $(QA_DatabasePassword)
              #ConnectionString: "Data Source=$(REQUEST_TARGETSERVER_NAME);Initial Catalog=$(REQUEST_TARGETDB_NAME);Encrypt=true;Connect Timeout=60"
              DeploymentAction: 'Import'
              bacpacFile: '$(REQUEST_BACPAC_FILE)'
              #AdditionalArguments: '/AccessToken:$(sqlToken) /p:DatabaseServiceObjective=S12'
              #IpDetectionMethod: 'AutoDetect'
          - task: AzurePowerShell@5
            displayName: 'TempDB_Visible_at_Frontend (Validating)'
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/OECM Refresh Database/Powershell_scripts/Common_Scripts/Validate_TempDB_Creation_Ubuntu.ps1'
              ScriptArguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(RefreshType)" "$(id)" "$(QA_DatabasePassword)"'
              azurePowerShellVersion: 'LatestVersion'
            env:
               QA_DATABASE_PASSWORD: $(QA_DatabasePassword)    
          - task: AzurePowerShell@5
            displayName: 'Perform_Post_Refresh_Steps_on_TempDB'
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/OECM Refresh Database/Powershell_scripts/Common_Scripts/Perform_Post_Refresh_Steps_on_TempDB_Ubuntu.ps1'
              ScriptArguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(RefreshType)" "$(id)" "$(QA_DatabasePassword)"'
              azurePowerShellVersion: 'LatestVersion'
            env:
               QA_DATABASE_PASSWORD: $(QA_DatabasePassword) 

          - task: AzurePowerShell@5
            displayName: 'New_Tenant_Post_Refresh_Scripts_Only_QA'
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/OECM Refresh Database/Powershell_scripts/Common_Scripts/New_Tenant_Post_Refresh_Scripts_Only_QA_Ubuntu.ps1'
              ScriptArguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(RefreshType)" "$(id)" "$(QA_DatabasePassword)"'
              azurePowerShellVersion: 'LatestVersion'
            env:
               QA_DATABASE_PASSWORD: $(QA_DatabasePassword)  

          - task: PowerShell@2
            displayName: 'Update the Work Item Status-Pending Wildfly Restart'
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/OECM Refresh Database/Powershell_scripts/Non_Conversion_Scripts/Update_workItem_Status.ps1'
              arguments: '"$(Organization)" "$(Project)" "$(Group_Id)" "$(System.AccessToken)" "$(id)"'

          - task : AzurePowerShell@5
            displayName: "Install AzTable module"
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              azurePowerShellVersion: 'LatestVersion'
              ScriptType: inlineScript
              inline: |
                # We need to install the AzTable module as it's missing in the Azure pipeline
                If (!(Get-Command Get-AzTableRow -ErrorAction Ignore)) {
                  Write-Host "Installing the AzTable module"
                  Install-Module AzTable -Force
                } Else {
                  Write-Host "AzTable module already installed"
                }         

          - task: AzurePowerShell@5
            displayName: 'Update Wiki'
            inputs:
              azureSubscription: 'autorefresh-service-connection'
              azurePowerShellVersion: 'LatestVersion'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/OECM Refresh Database/Powershell_scripts/Common_Scripts/WikiUpdate.ps1'
              ScriptArguments: '-SystemToken "$(System.AccessToken)" -RefreshReqNumber "$(id)" -Organization "$(Organization)" -Project "$(Project)"'