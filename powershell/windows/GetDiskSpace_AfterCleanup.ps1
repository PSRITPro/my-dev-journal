# Set location path
Set-Location -Path $PSScriptRoot

# Load configuration from JSON
$configFilePath = Join-Path -Path $PSScriptRoot -ChildPath "config.json"  # Update this path to your config.json file
$config = Get-Content -Path $configFilePath | ConvertFrom-Json

# Access settings from the JSON configuration
$BackupPath = $config.BackupSettings.BackupPath
$textFilePath = $config.BackupSettings.TextFilePath
$smtpServer = $config.SMTPSettings.smtpServer
$smtpPort = $config.SMTPSettings.smtpPort
$from = $config.SMTPSettings.from
$to = $config.SMTPSettings.to
$passwordFile = $config.SMTPSettings.passwordFile

# Function to format disk space details into HTML
function Get-DiskSpaceHtml {
    param (
        [string]$sectionTitle,
        [string]$serverName,
        [string]$backupPath,
        [float]$beforeCleanup,
        [float]$afterCleanup,
        [float]$cleanupSize
    )
    $body = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            color: #333;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #ffffff;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #d9534f;
            font-size: 28px;
            margin-bottom: 15px;
            border-bottom: 2px solid #d9534f;
            padding-bottom: 10px;
        }
        h2 {
            color: #5bc0de;
            font-size: 22px;
            margin-top: 0;
            margin-bottom: 15px;
        }
        p {
            font-size: 16px;
            line-height: 1.6;
            margin: 0 0 10px;
        }
        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 20px;
        }
        th, td {
            padding: 12px 15px;
            text-align: left;
            border: 1px solid #ddd;
            background-color: #ffffff;
        }
        th {
            background-color: #f7f7f7;
            color: #333;
            font-weight: bold;
            border-bottom: 2px solid #ddd;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .highlight {
            background-color: #fcf8e3;
        }
        .footer {
            font-size: 0.9em;
            color: #666;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>$sectionTitle</h1>
        <p>Server: <strong>$serverName</strong></p>
        <p>Backup Path: <strong>$backupPath</strong></p>
        <table>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Size (in GB)</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Before cleanup size</td>
                    <td>$beforeCleanup</td>
                </tr>
                <tr>
                    <td>After cleanup size</td>
                    <td>$afterCleanup</td>
                </tr>
                <tr>
                    <td>Total cleanup size</td>
                    <td>$cleanupSize</td>
                </tr>
            </tbody>
        </table>
        <div class="footer">
            <p>This report was generated by the disk space monitoring system.</p>
        </div>
    </div>
</body>
</html>
"@

    return $body
}

# Get total size of all files after cleanup
$afterCleanupTotalSize = (Get-ChildItem -Path $BackupPath -File | Measure-Object -Property Length -Sum).Sum
$afterCleanupTotalSize = [math]::round($afterCleanupTotalSize / 1GB, 2)
Write-Host "After Cleanup Size: $afterCleanupTotalSize GB"

# Read all content from the text file
$Content = Get-Content -Path $textFilePath

# Regular expression to match the total size value
$RegexPattern = "Total Backup Size: (\d+(\.\d+)?) GB"

# Initialize before cleanup size
$beforeCleanupTotalSize = 0

# Loop through each line of content and extract the size
ForEach($line in $Content) {
    If ($line -match $RegexPattern) {
        $beforeCleanupTotalSize = $matches[1]
        Write-Output "Total Backup Size Before Cleanup: $beforeCleanupTotalSize GB"
    }
}

# Calculate the cleanup size
$cleanupSize = $beforeCleanupTotalSize - $afterCleanupTotalSize

# Generate the HTML report
$diskInfoAfter = Get-DiskSpaceHtml -sectionTitle "Database Backup Storage Cleanup Report" `
    -serverName $($env:COMPUTERNAME) `
    -backupPath $BackupPath `
    -beforeCleanup $beforeCleanupTotalSize `
    -afterCleanup $afterCleanupTotalSize `
    -cleanupSize $cleanupSize

# Define email details
$subject = "Report: SQL Backup Files Cleanup" # on \\$($env:COMPUTERNAME)\$BackupPath"

# Read the password from a file
$txt = Get-Content $passwordFile
$securePassword = ConvertTo-SecureString $txt -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential ($from, $securePassword)

# Send the email
Send-MailMessage -From $from -To $to -Subject $subject -Body $diskInfoAfter -BodyAsHtml -SmtpServer $smtpServer -Port $smtpPort -UseSsl -Credential $credential -Priority High
